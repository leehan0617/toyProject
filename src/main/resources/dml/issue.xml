<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="issue">
<!-- 프로젝트 전체 리스트-->
<select id="selectAllProjectList" resultType="com.toy.project.model.ProjectDto" parameterType="String">
SELECT 
  a.user_id
  , b.project_id
  , b.project_name
FROM projectmember a
JOIN
  (SELECT project_id, project_name FROM project
  ) b
ON a.project_id = b.project_id
WHERE a.user_id = #{user_id}
</select>

<!-- 프로젝트 이슈 참여자 대상 조회하기 -->
<select id="selectApplyListFromProjectMember" resultType="com.toy.issue.model.projectMemberDto"  parameterType="String">
select a.user_id, b.project_id, b.project_name 
from projectmember a
join
  (select project_id, project_name from project
  ) b
on a.project_id = b.project_id
where a.project_id = #{projectId}
</select>

<!-- 프로젝트에 해당하는 이슈리스트 -->
<select id="selectIssueList" resultType="com.toy.issue.model.IssueDto"  parameterType="com.toy.issue.model.IssueDto">
select b.issue_id, b.issue_name, b.issue_detail, b.reg_id, c.state_code, d.state_name, c.reg_date
from issue b
join issuehistory c
on b.his_date = c.reg_date
join state d
on c.state_code = d.state_code
<if test="user_id != null and user_id != ''">
join issuemember a
on a.issue_id = b.issue_id
</if>
where b.project_id = #{project_id}
<if test="state_code != null and state_code != '' and state_code != 'all'">
and c.state_code = #{state_code}
</if>
<if test="user_id != null and user_id != ''">
and a.user_id = #{user_id}
</if>
and d.type = 'issue'
order by reg_date desc
limit #{page}, #{count}
</select>

<!-- 프로젝트에 해당하는 이슈리스트 (숫자)-->
<select id="selectIssueTotalCount" resultType="Integer"  parameterType="com.toy.issue.model.IssueDto">
select count(*) from (
select  b.issue_id, b.issue_name, b.issue_detail, b.reg_id, c.state_code, d.state_name
from issue b
join issuehistory c
on b.his_date = c.reg_date
join state d
on c.state_code = d.state_code
<if test="user_id != null and user_id != ''">
join issuemember a
on a.issue_id = b.issue_id
</if>
where b.project_id = #{project_id}
<if test="state_code != null and state_code != '' and state_code != 'all'">
and c.state_code = #{state_code}
</if>
<if test="user_id != null and user_id != ''">
and a.user_id = #{user_id}
</if>
and d.type = 'issue'
)cnt
</select>

<!-- 이슈생성  -->
<insert id = "insertIssue" parameterType = "com.toy.issue.model.IssueDto">
insert into issue (project_id, issue_detail, issue_name, reg_date, reg_id, his_date)
values( 
	#{project_id},
	#{issue_detail},
	#{issue_name},
	now(),
	#{reg_id},
	#{his_date}
)
<selectKey keyProperty="issue_id" resultType="String">
	SELECT LAST_INSERT_ID()
</selectKey>	
</insert>

<!-- 이슈멤버생성  -->
<insert id = "insertIssueMember" parameterType = "com.toy.issue.model.IssueDto">
insert into issuemember (issue_id, user_id, project_id)
values( 
	#{issue_num},
	#{user_id},
	#{project_num}
)
</insert>

<!-- 이슈히스토리에 추가- 상태변경시 -->
<insert id = "insertIssueHistory" parameterType = "com.toy.issue.model.IssueDto">
insert into issuehistory (issue_id, project_id, start_date, end_date, state_code, type, reg_date, reg_id)
values (
	#{issue_num},
	#{project_num},
	#{start_date},
	#{end_date},
	#{state_code},
	'issue',
	#{his_date},
	#{reg_id}
)
</insert>

<!-- 이슈멤버 삭제 -->
<delete id = "deleteIssueMember" parameterType = "String">
delete from issuemember
where issue_id = #{issue_id}
</delete>

<!-- 이슈삭제 -->
<delete id = 'deleteIssue' parameterType = 'String'>
delete from issue
where issue_id = #{issue_id}
</delete>

<!-- hisdate 변경 -->
<update id="updateIssueHisDate" parameterType = "com.toy.issue.model.IssueDto">
update issue
set his_date = #{his_date}
where issue_id = #{issue_id}
</update>

<!-- issue history 최신꺼 가져오기 -->
<select id = "selectTopIssueHistory"  parameterType = 'String' resultType = "com.toy.issue.model.IssueDto">
select * from issuehistory
where issue_id = #{issue_id}
order by reg_date desc
limit 1
</select>

<!-- issue_id -->
<select id = 'selectIssueInfoByIssueId' parameterType = 'String' resultType = "com.toy.issue.model.IssueDto">
SELECT a.issue_id,
  a.project_id,
  a.issue_name,
  a.issue_detail,
  a.reg_id,
  d.state_code,
  d.state_name,
  c.start_date,
  c.end_date
FROM issue a
JOIN issuehistory c
ON a.issue_id  = c.issue_id
AND a.his_date = c.reg_date
JOIN state d
ON c.state_code  = d.state_code
WHERE a.issue_id = #{issue_id}
AND d.type       = 'issue'
</select>

<!-- update issue -->
<update id = "updateIssue" parameterType = "com.toy.issue.model.IssueDto">
update issue
set issue_name = #{issue_name}
, issue_detail = #{issue_detail}
, his_date = #{his_date}
where issue_id = #{issue_id}
</update>

<!-- 내 이슈만 보기(내가 참여자로 설정된 이슈) -->
<select id = "selectMyIssue" parameterType = "com.toy.issue.model.IssueDto" resultType = "com.toy.issue.model.IssueDto">
select b.issue_id, b.issue_name
from issuemember a
join issue b
on a.issue_id = b.issue_id
where b.project_id = #{project_id}
and a.user_id = #{user_id}
</select>

<!-- 오늘 실행해야할 이슈리스트-->
<select id = "selectCronIssue" parameterType = "String" resultType="com.toy.issue.model.IssueDto">
select  b.issue_id, b.project_id, b.issue_name, b.issue_detail, b.reg_id, c.state_code, c.reg_date, c.start_date, c.end_date
from issue b
join issuehistory c
on b.his_date = c.reg_date
where c.start_date = #{now_date}
</select>

</mapper>