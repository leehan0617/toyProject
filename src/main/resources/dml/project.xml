<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="project">
	
	<!-- 20170516 김민지 프로젝트 생성하기-->
	<insert id="insertProject" parameterType="com.toy.project.model.ProjectDto">
		insert into project
			(
				project_name
				, project_detail
				, manager_id
				, reg_date
				, his_date
				, project_his_date
			)	
	   values
			(
			  #{project_name}
			 ,#{project_detail}
			 ,#{manager_id}
			 ,sysdate()
			 ,DATE_FORMAT(#{his_date}, "%Y-%m-%d %H:%i:%s")
			 ,DATE_FORMAT(#{project_his_date}, "%Y-%m-%d %H:%i:%s")
			) 
		<selectKey keyProperty="project_id" resultType="int">
			SELECT LAST_INSERT_ID()
		</selectKey>	
	</insert>
	
	<!-- 20170516 김민지 프로젝트별 직무 생성하기-->
	<insert id="insertProjectDepart" parameterType="HashMap">
		insert into projectdepartment
		(    project_id
			, depart_code
			, usercount
		)
		VALUES
			(
			#{project_id}	
			,#{depart_code}
			,#{usercount}
			)
	</insert>
	<!-- 20170517 김민지 프로젝트 리스트 불러오기 -->
	<select id="getProjectList" parameterType="com.toy.project.model.ProjectDto" resultType="com.toy.project.model.ProjectDto">
		select 
				project.project_id
				, project_name
				, usercount
				, project_detail
				, manager_id
				, (select user_name from user where user_id = manager_id) as manager_name
				, project.reg_date
				, depart_code
				, (select depart_name from department where depart_code = prodepart.depart_code) as depart_name
				, if(isnull(promember.user_id),'Y','N') as applyyn
				, DATE_FORMAT(history.start_date, "%Y-%m-%d") as project_start_date
				, DATE_FORMAT(history.end_date, "%Y-%m-%d") as project_end_date
				, DATE_FORMAT(recruit.start_date, "%Y-%m-%d") as recruit_start_date
				, DATE_FORMAT(recruit.end_date, "%Y-%m-%d") as recruit_end_date
				, history.state_code as project_state_code
				, recruit.state_code as recruit_state_code
				,IFNULL((select state_name from state where state.state_code = history.state_code and state.type = history.type),"시작전") as project_state_name
				,IFNULL((select state_name from state where state.state_code = recruit.state_code and state.type = recruit.type),"모집전") as recruit_state_name
		from project 
        left join (
				select *
				from projectdepartment
		)prodepart on project.project_id = prodepart.project_id
		 left join (
				select *
				from projectmember
		)promember on project.project_id = promember.project_id and promember.user_id = #{user_id}
		left join (
			select *
			from projecthistory
		)history on project.project_id = history.project_id and history.reg_date = project.project_his_date
		left join (
			select *
			from projectrecruithistory
		)recruit on project.project_id = recruit.project_id and recruit.reg_date = project.his_date
		<where>
			<if test=" manager_id !=null and manager_id !='' "> manager_id like #{manager_id}  </if>
			<if test=" recruitCodeList !=null and recruitCodeList !='' "> and recruit.state_code in <foreach item="recruit_state_code" index="index" open="(" close=")" separator="," collection="recruitCodeList">#{recruit_state_code}</foreach></if>
			<if test=" projectCodeList !=null and projectCodeList !='' "> and history.state_code in <foreach item="project_state_code" index="index" open="(" close=")" separator="," collection="projectCodeList">#{project_state_code}</foreach></if>
			<if test=" departCodeList !=null and departCodeList !='' "> and project.project_id in ( select project_id from projectdepartment where depart_code in <foreach item="depart_code" index="index" open="(" close=")" separator="," collection="departCodeList">#{depart_code}</foreach> )</if>
			<if test=" project_start_date !=null and project_start_date !='' "> and DATE_FORMAT(history.start_date, "%Y-%m-%d") <![CDATA[>=]]> #{project_start_date}  </if>
			<if test=" project_end_date !=null and project_end_date !='' "> and DATE_FORMAT(history.end_date, "%Y-%m-%d") <![CDATA[<=]]>  #{project_end_date}  </if>
			<if test=" recruit_start_date !=null and recruit_start_date !='' "> and DATE_FORMAT(recruit.start_date, "%Y-%m-%d") <![CDATA[>=]]> #{recruit_start_date}  </if>
			<if test=" recruit_end_date !=null and recruit_end_date !='' "> and DATE_FORMAT(recruit.end_date, "%Y-%m-%d") <![CDATA[<=]]>  #{recruit_end_date}  </if>
			<if test=" project_name !=null and project_name !='' "> and project_name like concat('%',#{project_name},'%') </if>
		</where>	
	</select>
	
	<!-- 20170517 김민지 내가 신청한 프로젝트  불러오기 -->
	<select id="getMyProjectList" parameterType="com.toy.project.model.ProjectDto" resultType="com.toy.project.model.ProjectDto">
	select 
				project.project_id
				, project_name
				, usercount
				, project_detail
				, manager_id
				, (select user_name from user where user_id = manager_id) as manager_name
				, project.reg_date
				, depart_code
				, promember.state_code as state_code
				, (select state_name from state where state.state_code = promember.state_code and type = 'apply') as state_name
				, (select depart_name from department where depart_code = prodepart.depart_code) as depart_name
				, if(isnull(promember.user_id),'Y','N') as applyyn
				, DATE_FORMAT(history.start_date, "%Y-%m-%d") as project_start_date
				, DATE_FORMAT(history.end_date, "%Y-%m-%d") as project_end_date
				, DATE_FORMAT(recruit.start_date, "%Y-%m-%d") as recruit_start_date
				, DATE_FORMAT(recruit.end_date, "%Y-%m-%d") as recruit_end_date
				, history.state_code as project_state_code
				, recruit.state_code as recruit_state_code
				,IFNULL((select state_name from state where state.state_code = history.state_code and state.type = history.type),"시작전") as project_state_name
				,IFNULL((select state_name from state where state.state_code = recruit.state_code and state.type = recruit.type),"모집전") as recruit_state_name
		from project 
        left join (
				select *
				from projectdepartment
		)prodepart on project.project_id = prodepart.project_id
		 left join (
				select *
				from projectmember
		)promember on project.project_id = promember.project_id and promember.user_id = #{user_id}
		left join (
			select *
			from projecthistory
		)history on project.project_id = history.project_id and history.reg_date = project.project_his_date
		left join (
			select *
			from projectrecruithistory
		)recruit on project.project_id = recruit.project_id and recruit.reg_date = project.his_date
		<where>
			promember.user_id is not null
			<if test=" manager_id !=null and manager_id !='' "> and manager_id like #{manager_id}  </if>
			<if test=" recruitCodeList !=null and recruitCodeList !='' "> and recruit.state_code in <foreach item="recruit_state_code" index="index" open="(" close=")" separator="," collection="recruitCodeList">#{recruit_state_code}</foreach></if>
			<if test=" projectCodeList !=null and projectCodeList !='' "> and history.state_code in <foreach item="project_state_code" index="index" open="(" close=")" separator="," collection="projectCodeList">#{project_state_code}</foreach></if>
			<if test=" departCodeList !=null and departCodeList !='' "> and project.project_id in ( select project_id from projectdepartment where depart_code in <foreach item="depart_code" index="index" open="(" close=")" separator="," collection="departCodeList">#{depart_code}</foreach> )</if>
			<if test=" project_start_date !=null and project_start_date !='' "> and DATE_FORMAT(history.start_date, "%Y-%m-%d") <![CDATA[>=]]> #{project_start_date}  </if>
			<if test=" project_end_date !=null and project_end_date !='' "> and DATE_FORMAT(history.end_date, "%Y-%m-%d") <![CDATA[<=]]>  #{project_end_date}  </if>
			<if test=" recruit_start_date !=null and recruit_start_date !='' "> and DATE_FORMAT(recruit.start_date, "%Y-%m-%d") <![CDATA[>=]]> #{recruit_start_date}  </if>
			<if test=" recruit_end_date !=null and recruit_end_date !='' "> and DATE_FORMAT(recruit.end_date, "%Y-%m-%d") <![CDATA[<=]]>  #{recruit_end_date}  </if>
			<if test=" project_name !=null and project_name !='' "> and project_name like   concat('%',#{project_name},'%') </if>
		</where>
	
	
	</select>
	<!-- 20170524 김민지 프로젝트 상세  -->
	<select id="getProjectDetail" parameterType="com.toy.project.model.ProjectDto" resultType="com.toy.project.model.ProjectDto">
		select 
				project.project_id
				, project.project_name
				, DATE_FORMAT(history.start_date, "%Y-%m-%d") as project_start_date
				, DATE_FORMAT(history.end_date, "%Y-%m-%d") as project_end_date
				, DATE_FORMAT(recruit.start_date, "%Y-%m-%d") as recruit_start_date
				, DATE_FORMAT(recruit.end_date, "%Y-%m-%d") as recruit_end_date
				, history.state_code as project_state_code
				, recruit.state_code as recruit_state_code
				,IFNULL((select state_name from state where state.state_code = history.state_code and state.type = history.type),"시작전") as project_state_name
				,IFNULL((select state_name from state where state.state_code = recruit.state_code and state.type = recruit.type),"모집전") as recruit_state_name
				, project.project_detail
				, project.manager_id
				, (select user_name from user where user_id = manager_id) as manager_name
				, if(isnull(promember.user_id),'Y','N') as applyyn
		from project project
		left join (
				select *
				from projectmember
		)promember on project.project_id = promember.project_id and promember.user_id = #{user_id}
		left join (
			select *
			from projecthistory
			where project_id = #{project_id}
		)history on project.project_id = history.project_id and history.reg_date = project.project_his_date
		left join (
			select *
			from projectrecruithistory
			where project_id = #{project_id}
		)recruit on project.project_id = recruit.project_id and recruit.reg_date = project.his_date
		where project.project_id = #{project_id}
	</select>
	<!-- 20170524 김민지 프로젝트 상세 직무 보기 -->
	<select id="getProjectDePDetail" parameterType="com.toy.project.model.ProjectDto" resultType="com.toy.project.model.ProjectDto">
		select project_id
			   ,depart_code
			   ,(select depart_name from department where depart_code = projectdepartment.depart_code) as depart_name
			   ,usercount
		from projectdepartment
		where project_id = #{project_id}
	</select>
	<!-- 20170601 프로젝트 맴버 insert -->
	<insert id="insertProjectMember" parameterType="com.toy.project.model.ProjectDto">
		insert into projectmember
		(   project_id
			,user_id
			,state_code
			,depart_detail
			,reg_date
			,reg_id
		)
		values(
			#{project_id}	
			,#{user_id}
			,#{state_code}
			,#{depart_detail}
			,sysdate()
			,#{reg_id}
		)
	</insert>
	
	<!-- 20170605 김민지 프로젝트 삭제하기 -->
	<delete id="deleteProject" parameterType="com.toy.project.model.ProjectDto">
		delete 
		from  project
		where project_id = #{project_id}
 	</delete>
	<!-- 20170605 김민지 프로젝트상세직무 삭제하기 -->
	<delete id="deleteProjectDePDetail" parameterType="com.toy.project.model.ProjectDto">
		delete 
		from  projectdepartment
		where project_id = #{project_id}
	</delete>
	
	<!-- 20170605 김민지 프로젝트맴버 삭제하기 -->
	<delete id="deleteProjectMember" parameterType="com.toy.project.model.ProjectDto">
		delete 
		from  projectmember
		where project_id = #{project_id}
	</delete>
	
	<!-- 20170605 김민지 프로젝트맴버  등록여부(본인제외) -->
	<select id="selectProjectMemberCnt" parameterType="com.toy.project.model.ProjectDto" resultType="int">
		select count(*) as cnt
		from  projectmember
		where project_id = #{project_id}
		and user_id != #{user_id}
	</select>
	
	<!-- 20170605 김민지 프로젝트 모집완료여부 -->
	<select id="selectProjectState" parameterType="com.toy.project.model.ProjectDto" resultType="string">
		select state_code  
		from  project
		where project_id = #{project_id}
	</select>
	
	<!-- 20170608 김민지 프로젝트 수정하기-->
	<update id="updateProject" parameterType="com.toy.project.model.ProjectDto">
		update  project
		set project_name =  #{project_name}
			,project_detail = #{project_detail}
			,mod_id =  #{mod_id}
			,mod_date = DATE_FORMAT(SYSDATE(),"%Y-%m-%d")
			,his_date = DATE_FORMAT(#{his_date}, "%Y-%m-%d %H:%i:%s")
			,project_his_date = DATE_FORMAT(#{his_date}, "%Y-%m-%d %H:%i:%s")
		where project_id = #{project_id}
	</update>
	<!-- 20170616 김민지 프로젝트 인원 리스트 가져오기 (본인 제외-담당자)-->
	<select id="getProjectMemberList" parameterType="com.toy.project.model.ProjectDto" resultType="com.toy.project.model.ProjectDto">
		select member.project_id 
			   ,member.user_id 
			   ,(select user_name from user where user.user_id = member.user_id) as user_name
			   ,member.state_code 
			   ,(select state_name from state where state.state_code = member.state_code) as state_name
			   ,member.depart_detail
		from  projectmember member
		where member.project_id = #{project_id}
		and member.user_id != #{user_id}
		order by user_name 
	</select>
	
	<!-- 20170616 프로젝트 맴버 상태코드 update -->
	<update id="updateProjectMember" parameterType="com.toy.project.model.ProjectDto">
		update projectmember
		set
			state_code = #{state_code}	
			,mod_id = #{mod_id}	
			,mod_date  = sysdate()
		where project_id = #{project_id}
			 and user_id = #{user_id}
	</update>
	<!-- 20170619 프로젝트 맴버 정보 가져오기 -->
	<select id = "getMemberInfo" parameterType="com.toy.project.model.ProjectDto" resultType="com.toy.project.model.ProjectDto">
	   select member.project_id 
			   ,member.user_id 
			   ,user.user_name
			   ,user.depart_code
			   ,(select depart_name from department where depart_code = user.depart_code) as depart_name
			   ,member.depart_detail
		from  projectmember member
		left join user user on user.user_id = member.user_id
		where member.project_id = #{project_id}
		and member.user_id = #{user_id}
	</select>
	
	<!-- 20170623 김민지 프로젝트 모집날짜 insert-->
	<insert id="insertProjectRecruitDate" parameterType="com.toy.project.model.ProjectDto">
		insert into projectrecruithistory
		(    project_id
			, start_date
			, end_date
			, state_code
			, type
			, reg_date
			, reg_id
		)
		VALUES
			(
			#{project_id}	
			,#{recruit_start_date}
			,#{recruit_end_date}
			,#{state_code}
			,#{type}
			,DATE_FORMAT(#{his_date}, "%Y-%m-%d %H:%i:%s")
			,#{reg_id}
			)
	</insert>
	
		<!-- 20170623 김민지 프로젝트 시작/종료 날짜 insert-->
	<insert id="insertProjectDate" parameterType="com.toy.project.model.ProjectDto">
		insert into projecthistory
		(    project_id
			, start_date
			, end_date
			, state_code
			, type
			, reg_date
			, reg_id
		)
		VALUES
			(
			#{project_id}	
			,#{project_start_date}
			,#{project_end_date}
			,#{state_code}
			,#{type}
			,DATE_FORMAT(#{project_his_date}, "%Y-%m-%d %H:%i:%s")
			,#{reg_id}
			)
	</insert>
	<!-- 20170627 김민지 상태코드 불러오기-->
	<select id ="getStateCode" parameterType="String" resultType="com.toy.project.model.ProjectDto" >
	 select   state_code 
	 		, state_name
	 from state
	 where type = #{type}
	</select>
	
	<!-- 20170707 김민지 프로젝트 his_date 수정하기-->
	<update id="updateProjectHisDate" parameterType="com.toy.project.model.ProjectDto">
		update  project
		set  mod_id =  #{mod_id}
			,mod_date = DATE_FORMAT(SYSDATE(),"%Y-%m-%d")
			<if test=" his_date !=null and his_date !='' ">,his_date = DATE_FORMAT(#{his_date}, "%Y-%m-%d %H:%i:%s")</if>
			<if test=" project_his_date !=null and project_his_date !='' ">,project_his_date = DATE_FORMAT(#{project_his_date}, "%Y-%m-%d %H:%i:%s")</if>
		where project_id = #{project_id}
	</update>
	
	<!-- 20170710 김민지 프로젝트  배치 조회하기 - 모집날짜-->
	<select id = "getTodayRecruit" parameterType="string" resultType="com.toy.project.model.ProjectDto">
		select 
				project.project_id
				, project.project_name
				, DATE_FORMAT(recruit.start_date, "%Y-%m-%d") as recruit_start_date
				, DATE_FORMAT(recruit.end_date, "%Y-%m-%d") as recruit_end_date
				, recruit.state_code as recruit_state_code
				, project.project_detail
				, project.his_date
		from project project
		left join (
			select *
			from projectrecruithistory
		)recruit on project.project_id = recruit.project_id and recruit.reg_date = project.his_date
		where DATE_FORMAT(recruit.start_date, "%Y-%m-%d") = #{recruit_start_date}
	</select>
	
		<!-- 20170710 김민지 프로젝트  배치 조회하기 - 프로젝트-->
	<select id = "getTodayProject" parameterType="string" resultType="com.toy.project.model.ProjectDto">
		select 
				project.project_id
				, project.project_name
				, DATE_FORMAT(history.start_date, "%Y-%m-%d") as project_start_date
				, DATE_FORMAT(history.end_date, "%Y-%m-%d") as project_end_date
				, history.state_code as project_state_code
				, project.project_detail
				, project.project_his_date
		from project project
		left join (
			select *
			from projecthistory
		)history on project.project_id = history.project_id and history.reg_date = project.project_his_date
		where DATE_FORMAT(history.start_date, "%Y-%m-%d") = #{project_start_date}
	</select>
</mapper>